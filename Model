import numpy as np
import pandas as pd
from sklearn.cross_decomposition import PLSRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_squared_error

X_nir = pd.read_csv('./NIR.csv', header=None).values
X_raman = pd.read_csv('./Raman.csv', header=None).values
y = pd.read_csv('./Y.csv', header=None).values

X_fused = np.concatenate([X_nir, X_raman], axis=1)

scaler_x = StandardScaler()
X_scaled = scaler_x.fit_transform(X_fused)

scaler_y = StandardScaler()
y_scaled = scaler_y.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)

pls = PLSRegression(n_components=15)
pls.fit(X_train, y_train)
y_pred_pls = pls.predict(X_test)
y_true_pls = scaler_y.inverse_transform(y_test)
y_pred_pls_inv = scaler_y.inverse_transform(y_pred_pls)

r2_pls = r2_score(y_true_pls, y_pred_pls_inv)
rmse_pls = mean_squared_error(y_true_pls, y_pred_pls_inv, squared=False)

print("PLS Regression:")
print("R² = {:.4f}".format(r2_pls))
print("RMSE = {:.4f}".format(rmse_pls))

svm_rbf = SVR(kernel='rbf')
y_pred_svm_list = []
y_true_svm_list = []

for i in range(y.shape[1]):
    svr = GridSearchCV(SVR(kernel='rbf'), param_grid={
        'C': [1, 10, 100],
        'gamma': ['scale', 0.01, 0.001]
    }, cv=3, scoring='neg_mean_squared_error', n_jobs=-1)
    
    svr.fit(X_train, y_train[:, i])
    y_pred = svr.predict(X_test)
    y_pred_svm_list.append(y_pred)
    y_true_svm_list.append(y_test[:, i])

y_pred_svm = np.stack(y_pred_svm_list, axis=1)
y_true_svm = np.stack(y_true_svm_list, axis=1)

y_pred_svm_inv = scaler_y.inverse_transform(y_pred_svm)
y_true_svm_inv = scaler_y.inverse_transform(y_true_svm)

r2_svm = r2_score(y_true_svm_inv, y_pred_svm_inv)
rmse_svm = mean_squared_error(y_true_svm_inv, y_pred_svm_inv, squared=False)

print("\nSVM Regression (RBF Kernel):")
print("R² = {:.4f}".format(r2_svm))
print("RMSE = {:.4f}".format(rmse_svm))
